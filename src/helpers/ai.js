//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

const axios = require('axios');
const moment = require('moment');
const config = require('../config/config');
const { MatchesModel } = require('../models');
const { GlobalService } = require('../services');
const { any } = require('joi');

// Set up your Hugging Face API key
const HF_API_KEY = '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';

// Function to generate match analysis and predictions
async function generateMatchAnalysisAndPrediction(matchData) {
    // console.log("ðŸš€ ~ file: ai.js:14 ~ generateMatchAnalysisAndPrediction ~ matchData:", matchData)
    try {
        const {
            fav_team,
            squad,
            head_to_head,
            forms,
            date_time,
            series,
            match_type,
            venue,
            team_a,
            team_b
        } = matchData;

        // Format recent forms for better readability
        const teamAForm = forms.team_a ? forms.team_a.join("-") : "No recent form";
        const teamBForm = forms.team_b ? forms.team_b.join("-") : "No recent form";

        // Calculate key players for each team
        const getKeyPlayers = (teamSquad) => {
            const allrounders = teamSquad.player.filter(p => p.play_role === "Allrounder").map(p => p.name);
            const bowlers = teamSquad.player.filter(p => p.play_role === "Bowler").map(p => p.name);
            const batsmen = teamSquad.player.filter(p => p.play_role === "Batsman").map(p => p.name);
            return { allrounders, bowlers, batsmen };
        };

        const teamAPlayers = getKeyPlayers(squad.team_a);
        const teamBPlayers = getKeyPlayers(squad.team_b);

        const prompt = `
Provide a detailed cricket match analysis and prediction for the upcoming ${match_type} match:

Match Details:
- Series: ${series}
- Teams: ${team_a} vs ${team_b}
- Venue: ${venue}
- Date: ${new Date(date_time).toLocaleDateString()}
- Match Type: ${match_type}

Head to Head Statistics:
- ${team_a} wins: ${head_to_head.team_a_win_count}
- ${team_b} wins: ${head_to_head.team_b_win_count}

Recent Form:
- ${team_a}: ${teamAForm}
- ${team_b}: ${teamBForm}

Key Players:
${team_a}:
- Batsmen: ${teamAPlayers.batsmen.join(", ")}
- Bowlers: ${teamAPlayers.bowlers.join(", ")}
- All-rounders: ${teamAPlayers.allrounders.join(", ")}

${team_b}:
- Batsmen: ${teamBPlayers.batsmen.join(", ")}
- Bowlers: ${teamBPlayers.bowlers.join(", ")}
- All-rounders: ${teamBPlayers.allrounders.join(", ")}

Please provide:
1. Team Analysis: Evaluate both teams' strengths and weaknesses based on their recent form and squad composition.
2. Key Player Matchups: Identify crucial player battles that could influence the match outcome.
3. Venue Analysis: How the pitch and conditions at ${venue} might affect the game.
4. Match Prediction: Based on all factors, predict the likely winner and key factors that could determine the outcome.
5. Strategic Recommendations: What should each team focus on to increase their chances of winning?

Note: Consider the match type (${match_type}) and how it affects team strategies and player selections.`;

        const response = await axios.post(
            'https://api-inference.huggingface.co/models/gpt2',
            { inputs: prompt.trim() },
            {
                headers: {
                    'Authorization': `Bearer ${HF_API_KEY}`,
                    'Content-Type': 'application/json'
                }
            }
        );

        if (response.data && response.data[0] && response.data[0].generated_text) {
            return response.data[0].generated_text;
        } else {
            throw new Error("No text generated by the model.");
        }
    } catch (error) {
        // Error handling as before
        console.error("Error in generating match analysis:", error.message);
        return `Error: ${error.message}`;
    }
}

// Function to generate fantasy cricket tips
async function generateFantasyCricketTips(prompt) {
    try {
        const response = await axios.post(
            'https://api-inference.huggingface.co/models/gpt2',
            { inputs: prompt.trim() },
            {
                headers: {
                    'Authorization': `Bearer ${HF_API_KEY}`,
                    'Content-Type': 'application/json'
                }
            }
        );

        if (response.data && response.data[0] && response.data[0].generated_text) {
            return response.data[0].generated_text;
        } else {
            throw new Error("No tips generated by the model.");
        }
    } catch (error) {
        console.error("Error in generating fantasy tips:", error.message);
        return `Error: ${error.message}`;
    }
}

// Function to generate user polls and quizzes
async function generateUserPollsAndQuizzes(prompt) {
    try {
        const response = await axios.post(
            'https://api-inference.huggingface.co/models/gpt2',
            { inputs: prompt.trim() },
            {
                headers: {
                    'Authorization': `Bearer ${HF_API_KEY}`,
                    'Content-Type': 'application/json'
                }
            }
        );

        if (response.data && response.data[0] && response.data[0].generated_text) {
            return response.data[0].generated_text;
        } else {
            throw new Error("No polls/quizzes generated by the model.");
        }
    } catch (error) {
        console.error("Error in generating polls/quizzes:", error.message);
        return `Error: ${error.message}`;
    }
}


async function promptForFantasyCricketTips(matchData) {
    const {
        match_type,
        squad,
        head_to_head,
        forms,
        venue,
        team_a,
        team_b,
        series
    } = matchData;

    // Get historical performances
    const h2hSummary = `${team_a} wins: ${head_to_head.team_a_win_count}, ${team_b} wins: ${head_to_head.team_b_win_count}`;

    // Get key players by role
    const getKeyPlayersByRole = (teamSquad) => {
        const batsmen = teamSquad.player.filter(p => p.play_role === "Batsman").map(p => p.name);
        const bowlers = teamSquad.player.filter(p => p.play_role === "Bowler").map(p => p.name);
        const allrounders = teamSquad.player.filter(p => p.play_role === "Allrounder").map(p => p.name);
        return { batsmen, bowlers, allrounders };
    };

    const teamAPlayers = getKeyPlayersByRole(squad.team_a);
    const teamBPlayers = getKeyPlayersByRole(squad.team_b);

    const prompt = `
Generate engaging cricket polls and quiz questions for the ${match_type} match between ${team_a} and ${team_b}.

Match Context:
- Series: ${series}
- Venue: ${venue}
- Head to Head: ${h2hSummary}
- Format: ${match_type}

Team Information:
${team_a}:
- Key Batsmen: ${teamAPlayers.batsmen.join(', ')}
- Key Bowlers: ${teamAPlayers.bowlers.join(', ')}
- All-rounders: ${teamAPlayers.allrounders.join(', ')}

${team_b}:
- Key Batsmen: ${teamBPlayers.batsmen.join(', ')}
- Key Bowlers: ${teamBPlayers.bowlers.join(', ')}
- All-rounders: ${teamBPlayers.allrounders.join(', ')}

Please generate:

1. Pre-Match Polls (4-5 questions):
- Winner prediction poll
- Key performer predictions
- Match specific events (first boundary, wickets, etc.)
- Strategic decisions (batting/bowling first)

2. Cricket Trivia Quiz (5-6 questions):
- Team head-to-head history
- Player statistics and records
- Venue-specific records
- Series-related facts
- Individual player achievements

3. Performance Prediction Polls:
- Top scorer prediction
- Highest wicket-taker prediction
- Best catch/fielding moment
- Player milestones possible in this match

4. Match Situation Questions:
- First powerplay score prediction
- Total match score prediction
- Number of sixes/boundaries prediction
- Man of the Match prediction

Format each question with:
- The main question
- Multiple choice options (where applicable)
- Correct answer (for trivia questions)
- Brief explanation or context
- Difficulty level (Easy/Medium/Hard)

Make questions engaging and relevant to current form, recent performances, and match conditions.`;

    return prompt;
}

// async function promptForPollsAndQuizzes(matchData) {
//     const {
//         match_type,
//         squad,
//         head_to_head,
//         forms,
//         venue,
//         team_a,
//         team_b,
//         series
//     } = matchData;

//     // Get historical performances
//     const h2hSummary = `${team_a} wins: ${head_to_head.team_a_win_count}, ${team_b} wins: ${head_to_head.team_b_win_count}`;

//     // Get key players by role
//     const getKeyPlayersByRole = (teamSquad) => {
//         const batsmen = teamSquad.player.filter(p => p.play_role === "Batsman").map(p => p.name);
//         const bowlers = teamSquad.player.filter(p => p.play_role === "Bowler").map(p => p.name);
//         const allrounders = teamSquad.player.filter(p => p.play_role === "Allrounder").map(p => p.name);
//         return { batsmen, bowlers, allrounders };
//     };

//     const teamAPlayers = getKeyPlayersByRole(squad.team_a);
//     const teamBPlayers = getKeyPlayersByRole(squad.team_b);

//     const prompt = `
// Generate engaging cricket polls and quiz questions for the ${match_type} match between ${team_a} and ${team_b}.

// Match Context:
// - Series: ${series}
// - Venue: ${venue}
// - Head to Head: ${h2hSummary}
// - Format: ${match_type}

// Team Information:
// ${team_a}:
// - Key Batsmen: ${teamAPlayers.batsmen.join(', ')}
// - Key Bowlers: ${teamAPlayers.bowlers.join(', ')}
// - All-rounders: ${teamAPlayers.allrounders.join(', ')}

// ${team_b}:
// - Key Batsmen: ${teamBPlayers.batsmen.join(', ')}
// - Key Bowlers: ${teamBPlayers.bowlers.join(', ')}
// - All-rounders: ${teamBPlayers.allrounders.join(', ')}

// Please generate:

// 1. Pre-Match Polls (4-5 questions):
// - Winner prediction poll
// - Key performer predictions
// - Match specific events (first boundary, wickets, etc.)
// - Strategic decisions (batting/bowling first)

// 2. Cricket Trivia Quiz (5-6 questions):
// - Team head-to-head history
// - Player statistics and records
// - Venue-specific records
// - Series-related facts
// - Individual player achievements

// 3. Performance Prediction Polls:
// - Top scorer prediction
// - Highest wicket-taker prediction
// - Best catch/fielding moment
// - Player milestones possible in this match

// 4. Match Situation Questions:
// - First powerplay score prediction
// - Total match score prediction
// - Number of sixes/boundaries prediction
// - Man of the Match prediction

// Format each question with:
// - The main question
// - Multiple choice options (where applicable)
// - Correct answer (for trivia questions)
// - Brief explanation or context
// - Difficulty level (Easy/Medium/Hard)

// Make questions engaging and relevant to current form, recent performances, and match conditions.`;

//     return prompt;
// }

// Example usage
async function main() {
    try {
        const matchData = await MatchesModel.findOne({ match_id: 6288 }).exec();

        if (matchData) {
            // const analysis = await generateMatchAnalysisAndPrediction(matchData);
            // console.log("Generated Match Analysis and Predictions:", analysis);

            // const promptTips = await promptForFantasyCricketTips(matchData);
            // const fantasyTips = await generateFantasyCricketTips(promptTips);
            // console.log("Generated Fantasy Cricket Tips:", fantasyTips);

            // const promptPollsAndQuizzes = await promptForPollsAndQuizzes(matchData);
            // console.log("ðŸš€ ~ file: ai.js:341 ~ main ~ promptPollsAndQuizzes:", promptPollsAndQuizzes)
            // const pollsAndQuizzes = await generateUserPollsAndQuizzes(promptPollsAndQuizzes);
            // console.log("Generated User Polls and Quizzes:", pollsAndQuizzes);
        } else {
            console.log("No match found with the given ID.");
        }
    } catch (error) {
        console.error("Error in fetching match data:", error.message);
    }
}

// Call the main function
main();